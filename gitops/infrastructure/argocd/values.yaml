argo-cd:
  global:
    domain: argocd.dev.techsecoms.com
    env:
    - name: TZ
      value: America/Chicago
    - name: ARGOCD_EXEC_TIMEOUT
      value: 300s
  configs:
    cm:
      create: true
      # application.resourceTrackingMethod: annotation+label
      admin.enabled: true
      exec.enabled: true
      url: https://argocd.dev.techsecoms.com
      resource.compareoptions: |
        # if ignoreAggregatedRoles set to true then differences caused by aggregated roles in RBAC resources are ignored.
        ignoreAggregatedRoles: true

      resource.customizations.ignoreDifferences.all: |
        jqPathExpressions:
        - '.metadata.labels."helm.sh/chart"'
      resource.customizations.ignoreDifferences.external-secrets.io_ExternalSecret: |
        jqPathExpressions:
        - '.spec.data[].remoteRef.conversionStrategy'
        - '.spec.data[].remoteRef.decodingStrategy'
        - '.spec.data[].remoteRef.metadataPolicy'
      kustomize.buildOptions: "--enable-helm"
      timeout.reconciliation.jitter: 60s
      timeout.reconciliation: 300s
      statusbadge.enabled: true
      # resource.ignoreResourceUpdatesEnabled: "true"
      resource.customizations.health.argoproj.io_Application: |
        hs = {}
        hs.status = "Progressing"
        hs.message = ""
        if obj.status ~= nil then
          if obj.status.health ~= nil then
            hs.status = obj.status.health.status
            if obj.status.health.message ~= nil then
              hs.message = obj.status.health.message
            end
          end
        end
        return hs

      resource.customizations: |
        argoproj.io/Application:
          health.lua: |
            hs = {}
            hs.status = "Progressing"
            hs.message = ""
            if obj.status ~= nil then
              if obj.status.health ~= nil then
                hs.status = obj.status.health.status
                if obj.status.health.message ~= nil then
                  hs.message = obj.status.health.message
                end
              end
            end
            return hs

        external-secrets.io/ExternalSecret:
          ignoreDifferences: |
            jqPathExpressions:
              - .spec.data[].remoteRef.conversionStrategy
              - .spec.data[].remoteRef.decodingStrategy
              - .spec.data[].remoteRef.metadataPolicy

        admissionregistration.k8s.io/MutatingWebhookConfiguration:
          ignoreDifferences: |
            jsonPointers:
            - /webhooks/0/clientConfig/caBundle
      oidc.config: |
        name: OIDC
        issuer: <path:secret/data/argocd#iodc_issuer_url>
        clientID: <path:secret/data/argocd#oidc_client_id>
        clientSecret: <path:secret/data/argocd#oidc_client_secret>
        enableUserInfoGroups: true
        userInfoCacheExpiration: "5m"
        userInfoPath: /userinfo
        requestedIDTokenClaims:
          email:
            essential: true
          groups:
            essential: true
        requestedScopes:
          - openid
          - profile
          - email
          - groups
    credentialTemplates:
      github-enterprise-creds-1:
        url: <path:secret/data/argocd#url>
        githubAppID: <path:secret/data/argocd#github_app_id>
        githubAppInstallationID: <path:secret/data/argocd#github_app_installation_id>
        githubAppPrivateKey: |
          <path:secret/data/argocd#github_app_private_key>
    params:
      controller.diff.server.side: true
      server.insecure: true
      otlp.address: ''
      ## Controller Properties
      controller.status.processors: 20
      controller.operation.processors: 10
      controller.self.heal.timeout.seconds: 5
      controller.repo.server.timeout.seconds: 60
    rbac:
      policy.csv: |
        g, argocd:admin, role:admin
        g, argocd:read_all, role:readonly
    secret:
      argocdServerAdminPassword: <path:secret/data/argocd#hash_admin_password>

  crds:
    install: true
    keep: false

  controller:
    resources:
      requests:
        cpu: 100m
        memory: 700Mi
      limits:
        memory: 4Gi
    args:
      repoServerTimeoutSeconds: 300

  dex:
    enabled: false

  redis-ha:
    enabled: true
  redis:
    resources:
      requests:
        cpu: 100m
        memory: 64Mi
      limits:
        memory: 1Gi

  server:
    resources:
      requests:
        cpu: 50m
        memory: 64Mi
      limits:
        memory: 1Gi
    autoscaling:
      enabled: false
      minReplicas: 1
      maxReplicas: 5
      targetCPUUtilizationPercentage: 50
      targetMemoryUtilizationPercentage: 50
    ingress:
      enabled: true
      annotations:
        cert-manager.io/cluster-issuer: letsencrypt-prod
        nginx.ingress.kubernetes.io/ssl-passthrough: "true"
        external-dns.alpha.kubernetes.io/enabled: "true"
        # nginx.ingress.kubernetes.io/backend-protocol: "HTTPS"
        # nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
        # nginx.ingress.kubernetes.io/backend-protocol: "HTTPS"
        # cert-manager.io/renew-before: "720h"
        # cert-manager.io/duration: "2160h"
      ingressClassName: nginx
      hostname: argocd.dev.techsecoms.com
      tls: true
      https: true

  repoServer:
    replicas: 2
    rbac:
    - verbs:
      - get
      - list
      - watch
      apiGroups:
      - ''
      resources:
      - secrets
      - configmaps
    automountServiceAccountToken: true
    volumes:
    - name: avp-cmp-plugin
      configMap:
        name: avp-cmp-plugin
    - name: custom-tools
      emptyDir: {}

    initContainers:
    - name: download-tools
      image: registry.access.redhat.com/ubi8
      command: [ sh, -c ]
      env:
      - name: AVP_VERSION
        value: "1.18.1"
      args:
      - >-
        curl -L https://github.com/argoproj-labs/argocd-vault-plugin/releases/download/v$(AVP_VERSION)/argocd-vault-plugin_$(AVP_VERSION)_linux_amd64 -o argocd-vault-plugin && chmod +x argocd-vault-plugin && mv argocd-vault-plugin /custom-tools/
      volumeMounts:
      - mountPath: /custom-tools
        name: custom-tools

    extraContainers:
    # argocd-vault-plugin with plain YAML
    - name: avp-k8s
      command:
      - "/var/run/argocd/argocd-cmp-server"
      image: quay.io/argoproj/argocd
      securityContext:
        runAsNonRoot: true
        runAsUser: 999
      volumeMounts:
      - mountPath: /var/run/argocd
        name: var-files
      - mountPath: /home/argocd/cmp-server/plugins
        name: plugins
      - mountPath: /tmp
        name: tmp

      - mountPath: /home/argocd/cmp-server/config/plugin.yaml
        subPath: avp-k8s.yaml
        name: avp-cmp-plugin

      - name: custom-tools
        subPath: argocd-vault-plugin
        mountPath: /usr/local/bin/argocd-vault-plugin
      envFrom:
      - secretRef:
          name: avp-plugin-credentials

    # argocd-vault-plugin with plain Kustomize
    - name: avp-kustomize
      command: [ /var/run/argocd/argocd-cmp-server ]
      image: quay.io/argoproj/argocd
      securityContext:
        runAsNonRoot: true
        runAsUser: 999
      volumeMounts:
      - mountPath: /var/run/argocd
        name: var-files
      - mountPath: /home/argocd/cmp-server/plugins
        name: plugins
      - mountPath: /tmp
        name: tmp

      - mountPath: /home/argocd/cmp-server/config/plugin.yaml
        subPath: avp-kustomize.yaml
        name: avp-cmp-plugin

      - name: custom-tools
        subPath: argocd-vault-plugin
        mountPath: /usr/local/bin/argocd-vault-plugin
      envFrom:
      - secretRef:
          name: avp-plugin-credentials
      # argocd-vault-plugin with Helm
    - name: avp-helm
      command: [ /var/run/argocd/argocd-cmp-server ]
      image: quay.io/argoproj/argocd
      securityContext:
        runAsNonRoot: true
        runAsUser: 999
      volumeMounts:
      - mountPath: /var/run/argocd
        name: var-files
      - mountPath: /home/argocd/cmp-server/plugins
        name: plugins
      - mountPath: /tmp
        name: tmp

      # Register plugins into sidecar
      - mountPath: /home/argocd/cmp-server/config/plugin.yaml
        subPath: avp-helm.yaml
        name: avp-cmp-plugin

      - name: custom-tools
        subPath: argocd-vault-plugin
        mountPath: /usr/local/bin/argocd-vault-plugin
      envFrom:
      - secretRef:
          name: avp-plugin-credentials

  applicationSet:
    resources:
      requests:
        cpu: 50m
        memory: 64Mi
      limits:
        memory: 1Gi

    argocdUrl: argocd.dev.techsecoms.com
