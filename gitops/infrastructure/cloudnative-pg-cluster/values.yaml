cloudnative-pg-cluster:
type: postgresql

version:
  # -- PostgreSQL major version to use
  postgresql: "17"
  # -- If using TimescaleDB, specify the version
  timescaledb: "2.15"
  # -- If using PostGIS, specify the version
  postgis: "3.4"

recovery:
  method: backup

  # -- One of `s3`, `azure` or `google`
  provider: s3
  s3:
    region: "us-east-1"
    bucket: postgres
    path: "/"
    accessKey: <path:secret/data/minio#postgres_user>
    secretKey: <path:secret/data/minio#postgres_password>
    # -- Use the role based authentication without providing explicitly the keys
    inheritFromIAMRole: false

  # See https://cloudnative-pg.io/documentation/1.22/bootstrap/#bootstrap-from-a-live-cluster-pg_basebackup
  pgBaseBackup:
    # -- Name of the database used by the application. Default: `app`.
    database: grafana
    # -- Name of the secret containing the initial credentials for the owner of the user database. If empty a new secret will be created from scratch
    secret: "postgres-superuser-secret"
    # -- Name of the owner of the database in the instance to be used by applications. Defaults to the value of the `database` key.
    owner: "grafana"
    source:
      host: ""
      port: 5432
      username: ""
      database: "grafana"
      sslMode: "verify-full"
      passwordSecret:
        # -- Whether to create a secret for the password
        create: false
        # -- Name of the secret containing the password
        name: "username"
        # -- The key in the secret containing the password
        key: "password"
        # -- The password value to use when creating the secret
        value: ""
      sslKeySecret:
        name: ""
        key: ""
      sslCertSecret:
        name: ""
        key: ""
      sslRootCertSecret:
        name: ""
        key: ""

cluster:
  # -- Number of instances
  instances: 3
  roles:
  - name: grafana
    ensure: present
    login: true
    superuser: false
    createdb: false
    passwordSecret:
      name: grafana-db-credentials
  - name: loki
    ensure: present
    login: true
    superuser: false
    createdb: false
    passwordSecret:
      name: loki-db-credentials
  - name: tempo
    ensure: present
    login: true
    superuser: false
    createdb: false
    passwordSecret:
      name: tempo-db-credentials
  # -- Name of the container image, supporting both tags (<image>:<tag>) and digests for deterministic and repeatable deployments:
  # <image>:<tag>@sha256:<digestValue>
  imageName: "" # Default value depends on type (postgresql/postgis/timescaledb)

  # -- Reference to `ImageCatalog` of `ClusterImageCatalog`, if specified takes precedence over `cluster.imageName`
  imageCatalogRef: {}
    # kind: ImageCatalog
    # name: postgresql

  # -- Image pull policy. One of Always, Never or IfNotPresent. If not defined, it defaults to IfNotPresent. Cannot be updated.
  # More info: https://kubernetes.io/docs/concepts/containers/images#updating-images
  imagePullPolicy: IfNotPresent

  # -- The list of pull secrets to be used to pull the images.
  # See: https://cloudnative-pg.io/documentation/current/cloudnative-pg.v1/#postgresql-cnpg-io-v1-LocalObjectReference
  imagePullSecrets: []

  storage:
    size: 8Gi
    storageClass: "ebs-sc"

  walStorage:
    enabled: false
    size: 1Gi
    storageClass: ""

  # -- The UID of the postgres user inside the image, defaults to 26
  postgresUID: -1

  # -- The GID of the postgres user inside the image, defaults to 26
  postgresGID: -1

  # -- Customization of service definitions. Please refer to https://cloudnative-pg.io/documentation/1.24/service_management/
  services: {}

  # -- Resources requirements of every generated Pod.
  # Please refer to https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/ for more information.
  # We strongly advise you use the same setting for limits and requests so that your cluster pods are given a Guaranteed QoS.
  # See: https://kubernetes.io/docs/concepts/workloads/pods/pod-qos/
  resources: {}
    # limits:
    #   cpu: 2000m
    #   memory: 8Gi
    # requests:
    #   cpu: 2000m
    #   memory: 8Gi

  # -- Method to follow to upgrade the primary server during a rolling update procedure, after all replicas have been
  # successfully updated. It can be switchover (default) or restart.
  primaryUpdateMethod: switchover

  # -- Strategy to follow to upgrade the primary server during a rolling update procedure, after all replicas have been
  # successfully updated: it can be automated (unsupervised - default) or manual (supervised)
  primaryUpdateStrategy: unsupervised

  # -- The instances' log level, one of the following values: error, warning, info (default), debug, trace
  logLevel: "info"

  # -- Affinity/Anti-affinity rules for Pods.
  # See: https://cloudnative-pg.io/documentation/current/cloudnative-pg.v1/#postgresql-cnpg-io-v1-AffinityConfiguration
  affinity:
    topologyKey: topology.kubernetes.io/zone

  # -- The configuration for the CA and related certificates.
  # See: https://cloudnative-pg.io/documentation/current/cloudnative-pg.v1/#postgresql-cnpg-io-v1-CertificatesConfiguration
  certificates: {}

  # -- When this option is enabled, the operator will use the SuperuserSecret to update the postgres user password.
  # If the secret is not present, the operator will automatically create one.
  # When this option is disabled, the operator will ignore the SuperuserSecret content, delete it when automatically created,
  # and then blank the password of the postgres user by setting it to NULL.
  enableSuperuserAccess: true
  superuserSecret: "postgres-superuser-secret"

  # -- Allow to disable PDB, mainly useful for upgrade of single-instance clusters or development purposes
  # See: https://cloudnative-pg.io/documentation/current/kubernetes_upgrade/#pod-disruption-budgets
  enablePDB: true

  monitoring:
    # -- Whether to enable monitoring
    enabled: true
    podMonitor:
      # -- Whether to enable the PodMonitor
      enabled: true
      metricRelabelings: []
    prometheusRule:
      enabled: true

  postgresql:
    initdb:
      localeCollate: 'en_US.utf8'
      localeCType: 'en_US.utf8'
      dataChecksums: true
      database: app
      owner: grafana
      secret:
        name: postgres-superuser-secret
      postInitTemplateSQL:
      - CREATE EXTENSION postgis;
      - CREATE EXTENSION postgis_topology;
      - CREATE EXTENSION fuzzystrmatch;
      - CREATE EXTENSION postgis_tiger_geocoder

  # -- Configure the metadata of the generated service account
  serviceAccountTemplate:
    metadata:
      name: cnpg-postgres-operator-sa
      # annotations:
      #   eks.amazonaws.com/role-arn: arn:aws:iam::682033478562:role/kosmos-observability-sbx-wl-01-s3-role

  additionalLabels: {}
  annotations: {}

backups:
  # -- You need to configure backups manually, so backups are disabled by default.
  enabled: true

  # -- Overrides the provider specific default endpoint. Defaults to:
  # S3: https://s3.<region>.amazonaws.com"
  endpointURL: "" # Leave empty if using the default S3 endpoint
  # -- Specifies a CA bundle to validate a privately signed certificate.
  endpointCA:
    # -- Creates a secret with the given value if true, otherwise uses an existing secret.
    create: false
    name: ""
    key: ""
    value: ""

  # -- Overrides the provider specific default path. Defaults to:
  # S3: s3://<bucket><path>
  # Azure: https://<storageAccount>.<serviceName>.core.windows.net/<containerName><path>
  # Google: gs://<bucket><path>
  destinationPath: ""
  # -- One of `s3`, `azure` or `google`
  provider: s3
  s3:
    region: "us-east-1"
    bucket: "kosmos-observability-sbx-wl-01"
    path: "/cloudnativepg"
    accessKey: ""
    secretKey: ""
    # -- Use the role based authentication without providing explicitly the keys
    inheritFromIAMRole: true
  azure:
    path: "/"
    connectionString: ""
    storageAccount: ""
    storageKey: ""
    storageSasToken: ""
    containerName: ""
    serviceName: blob
    inheritFromAzureAD: false
  google:
    path: "/"
    bucket: ""
    gkeEnvironment: false
    applicationCredentials: ""
  secret:
    # -- Whether to create a secret for the backup credentials
    create: true
    # -- Name of the backup credentials secret
    name: ""

  wal:
    # -- WAL compression method. One of `` (for no compression), `gzip`, `bzip2` or `snappy`.
    compression: gzip
    # -- Whether to instruct the storage provider to encrypt WAL files. One of `` (use the storage container default), `AES256` or `aws:kms`.
    encryption: AES256
    # -- Number of WAL files to be archived or restored in parallel.
    maxParallel: 1
  data:
    # -- Data compression method. One of `` (for no compression), `gzip`, `bzip2` or `snappy`.
    compression: gzip
    # -- Whether to instruct the storage provider to encrypt data files. One of `` (use the storage container default), `AES256` or `aws:kms`.
    encryption: AES256
    # -- Number of data files to be archived or restored in parallel.
    jobs: 2

  scheduledBackups: []
    # -
    #   # -- Scheduled backup name
    #   name: daily-backup
    #   # -- Schedule in cron format
    #   schedule: "0 0 0 * * *"
    #   # -- Backup owner reference
    #   backupOwnerReference: self
    #   # -- Backup method, can be `barmanObjectStore` (default) or `volumeSnapshot`
    #   method: barmanObjectStore
    #   suspend: true

  # -- Retention policy for backups
  retentionPolicy: "30d"

imageCatalog:
  # -- Whether to provision an image catalog. If imageCatalog.images is empty this option will be ignored.
  create: true
  # -- List of images to be provisioned in an image catalog.
  images: []
    # - image: ghcr.io/your_repo/your_image:your_tag
    #   major: 16

# -- List of PgBouncer poolers
poolers: []
  # -
  #   # -- Pooler name
  #   name: rw
  #   # -- PgBouncer type of service to forward traffic to.
  #   type: rw
  #   # -- PgBouncer pooling mode
  #   poolMode: transaction
  #   # -- Number of PgBouncer instances
  #   instances: 3
  #   # -- PgBouncer configuration parameters
  #   parameters:
  #     max_client_conn: "1000"
  #     default_pool_size: "25"
  #   monitoring:
  #     # -- Whether to enable monitoring
  #     enabled: false
  #     podMonitor:
  #         # -- Whether to enable the PodMonitor
  #       enabled: true
  #   # -- Custom PgBouncer deployment template.
  #   # Use to override image, specify resources, etc.
  #   template: {}
  # -
  #   # -- Pooler name
  #   name: ro
  #   # -- PgBouncer type of service to forward traffic to.
  #   type: ro
  #   # -- PgBouncer pooling mode
  #   poolMode: transaction
  #   # -- Number of PgBouncer instances
  #   instances: 3
  #   # -- PgBouncer configuration parameters
  #   parameters:
  #     max_client_conn: "1000"
  #     default_pool_size: "25"
  #   monitoring:
  #     # -- Whether to enable monitoring
  #     enabled: false
  #     podMonitor:
  #         # -- Whether to enable the PodMonitor
  #       enabled: true
  #   # -- Custom PgBouncer deployment template.
  #   # Use to override image, specify resources, etc.
  #   template: {}
