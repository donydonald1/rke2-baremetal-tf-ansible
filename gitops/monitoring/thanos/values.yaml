thanos:
  image:
    registry: docker.io
    repository: bitnamilegacy/thanos
    # tag: 0.39.2-debian-12-r2
    digest: ""
  query:
    enabled: true
    replicaCount: 2
    replicaLabels:
    - replica
    dnsDiscovery:
      sidecarsService: kube-prometheus-stack-thanos-discovery
      sidecarsNamespace: monitoring
    ingress:
      enabled: true
      hostname: thanos.prod.techsecom.io
      annotations:
        gethomepage.dev/enabled: 'true'
        gethomepage.dev/group: Monitoring
        gethomepage.dev/icon: prometheus
        gethomepage.dev/name: Thanos
        kubernetes.io/ingress.class: "nginx"
        cert-manager.io/cluster-issuer: "letsencrypt-prod"
        cert-manager.io/revision-history-limit: "3"
        external-dns.alpha.kubernetes.io/enabled: "true"
        cert-manager.io/duration: "2160h"
        cert-manager.io/renew-before: "720h"
        # nginx.ingress.kubernetes.io/auth-url: "http://oauth2-proxy.kube-system.svc.cluster.local:80/oauth2/auth"
        # nginx.ingress.kubernetes.io/auth-signin: "https://auth.rsr.net/oauth2/start"
      tls: true
  queryFrontend:
    enabled: false
  bucketweb:
    enabled: true
    ingress:
      enabled: true
      annotations:
        kubernetes.io/ingress.class: "nginx"
        cert-manager.io/cluster-issuer: letsencrypt-prod
        cert-manager.io/revision-history-limit: "3"
        external-dns.alpha.kubernetes.io/enabled: "true"
        cert-manager.io/duration: "2160h"
        cert-manager.io/renew-before: "720h"
        # nginx.ingress.kubernetes.io/auth-url: "http://oauth2-proxy.kube-system.svc.cluster.local:80/oauth2/auth"
        # nginx.ingress.kubernetes.io/auth-signin: "https://auth.rsr.net/oauth2/start"
      hostname: thanos-bucketweb.prod.techsecom.io
      tls: true
  compactor:
    enabled: true
    # extraFlags: [ "--compact.concurrency", "4" ]
    retentionResolutionRaw: 7d
    retentionResolution5m: 14d
    retentionResolution1h: 30d
    ingress:
      enabled: true
      annotations:
        kubernetes.io/ingress.class: "nginx"
        cert-manager.io/cluster-issuer: letsencrypt-prod
        cert-manager.io/revision-history-limit: "3"
        external-dns.alpha.kubernetes.io/enabled: "true"
        cert-manager.io/duration: "2160h"
        cert-manager.io/renew-before: "720h"
        # nginx.ingress.kubernetes.io/auth-url: "http://oauth2-proxy.kube-system.svc.cluster.local:80/oauth2/auth"
        # nginx.ingress.kubernetes.io/auth-signin: "https://auth.rsr.net/oauth2/start"
      hostname: thanos-compactor.prod.techsecom.io
      tls: true
    persistence:
      enabled: true
      storageClass: nfs-csi
      size: 20Gi
  storegateway:
    enabled: true
    ingress:
      enabled: true
      annotations:
        kubernetes.io/ingress.class: "nginx"
        cert-manager.io/cluster-issuer: letsencrypt-prod
        cert-manager.io/revision-history-limit: "3"
        external-dns.alpha.kubernetes.io/enabled: "true"
        cert-manager.io/duration: "2160h"
        cert-manager.io/renew-before: "720h"
        # nginx.ingress.kubernetes.io/auth-url: "http://oauth2-proxy.kube-system.svc.cluster.local:80/oauth2/auth"
        # nginx.ingress.kubernetes.io/auth-signin: "https://auth.rsr.net/oauth2/start"
      hostname: thanos-storegateway.prod.techsecom.io
      tls: true
    persistence:
      enabled: true
      storageClass: nfs-csi
      size: 7Gi
  ruler:
    enabled: false
  metrics:
    enabled: true
    serviceMonitor:
      enabled: true
  # receive:
  #   ## @param receive.enabled Enable/disable Thanos Receive component
  #   ##
  #   enabled: true
  #   ## @param receive.mode Mode to run receiver in. Valid options are "standalone" or "dual-mode"
  #   ## ref: https://github.com/thanos-io/thanos/blob/release-0.22/docs/proposals-accepted/202012-receive-split.md
  #   ## Enables running the Thanos Receiver in dual mode. Setting this to "dual-mode" will create a deployment for
  #   ## the stateless thanos distributor.
  #   mode: standalone
  #   ## @param receive.logLevel Thanos Receive log level
  #   ##
  #   logLevel: info
  #   resources:
  #     limits:
  #       memory: 1000Mi
  objstoreConfig: |
    type: s3
    config:
      bucket: thanos
      endpoint: "http://minio.minio.svc.cluster.local:9000"
      access_key: <path:secret/data/minio#postgres_user>
      secret_key: <path:secret/data/minio#postgres_password>
      insecure: true
