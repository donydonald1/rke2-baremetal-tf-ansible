gitlab:
  gitaly:
    persistence:
      size: 100Gi
      storageClass: longhorn
  gitlab-pages:
    maxReplicas: 3
    minReplicas: 1
    resources:
      requests:
        cpu: 200m
        memory: 1000M
    # tls:
    #   enabled: true
    #   secretName: gitlab-pages-tls-secret
  gitlab-rails:
    artifacts:
      objectStorage:
        bucket: gitlab-artifacts
        connection: {}
        enabled: true

  gitlab-shell:
    maxReplicas: 6
    minReplicas: 1
    sshDaemon: gitlab-sshd
    opensshd:
      supplemental_config: |-
        HostKeyAlgorithms +ssh-rsa,ssh-rsa-cert-v01@openssh.com
        PubkeyAcceptedAlgorithms +ssh-rsa,ssh-rsa-cert-v01@openssh.com
        CASignatureAlgorithms +ssh-rsa

  sidekiq:
    maxReplicas: 6
    minReplicas: 1
    resources:
      requests:
        cpu: 300m
        memory: 1000M
  toolbox:
    extraEnvFrom:
      AWS_ACCESS_KEY_ID:
        secretKeyRef:
          name: aws-credentials
          key: accessKeyId
      AWS_SECRET_ACCESS_KEY:
        secretKeyRef:
          name: aws-credentials
          key: secretAccessKey
    extraEnv:
      AWS_DEFAULT_REGION: us-east-1
      AWS_REQUEST_CHECKSUM_CALCULATION: WHEN_REQUIRED
      AWS_ENDPOINT_URL_S3: http://minio.minio.svc.cluster.local:9000
      AWS_S3_FORCE_PATH_STYLE: "1"
    persistence:
      enabled: true
    backups:
      cron:
        enabled: true
        # schedule: "@daily"
        schedule: "0 * * * *"
        extraArgs: "--s3tool awscli --aws-s3-endpoint-url http://minio.minio.svc.cluster.local:9000"
        persistence:
          enabled: true
      objectStorage:
        config:
          secret: s3cmd-config
          key: config
  webservice:
    maxReplicas: 2
    ingress:
      tls:
        secretName: webservice-tls-secret
    # metrics:
    #   tls:
    #     enabled: true
    #     secretName: webservice-metrics-tls-secret
    minReplicas: 1
    resources:
      requests:
        cpu: 300m
        memory: 1000M
    # tls:
    #   enabled: true
    #   secretName: gitlab-wildcard-tls
    workhorse:
      monitoring:
        exporter:
          enabled: true
          # tls:
          #   enabled: true
          #   secretName: workhorse-tls-secret

gitlab-zoekt:
  install: false
  replicas: 1
  indexStorage: 128Gi

openbao:
  install: false

gitlab-runner:
  certsSecretName: gitlab-wildcard-tls-chain
  envVars:
  - name: RUNNER_ENV
    value: DOCKER_TLS_CERTDIR=/certs
  - name: AWS_ACCESS_KEY_ID
    valueFrom:
      secretKeyRef:
        key: accessKeyId
        name: aws-credentials
  - name: AWS_SECRET_ACCESS_KEY
    valueFrom:
      secretKeyRef:
        key: secretAccessKey
        name: aws-credentials
  install: true
  log_level: debug
  podAnnotations:
    gitlab.com/prometheus_port: "9252"
    gitlab.com/prometheus_scrape: "true"
  rbac:
    clusterWideAccess: true
    create: true
    serviceAccount:
      create: true
    serviceAccountName: gitlab-runner
  runners:
    config: |
      [[runners]]
        name = "gitlab-runner"
        [runners.kubernetes]
          privileged = true
          poll_timeout = 2000
          node_selector_overwrite_allowed = ".*"
          namespace = "{{ .Release.Namespace }}"
          image = "docker:stable"

        [runners.cache]
          Type = "s3"
          Path = "gitlab-runner"
          Shared = true
          [runners.cache.s3]
            ServerAddress = "minio.minio.svc.cluster.local:9000"
            BucketName = "gitlab-runner-cache"
            BucketLocation = "us-east-1"

            S3ForcePathStyle = true
            Insecure = true

      [[runners.kubernetes.volumes.empty_dir]]
        name = "docker-certs"
        mount_path = "/certs/client"
        medium = "Memory"
    privileged: true
  securityContext:
    allowPrivilegeEscalation: true
    privileged: true
certmanager-issuer:
  email: donydonald1@icloud.com
global:
  monitoring:
    enabled: true
  openbao:
    enabled: false

  appConfig:
    initialDefaults:
      signupEnabled: false
      gitlabProductUsageData: true
    artifacts:
      bucket: gitlab-artifacts
      connection: {}
      enabled: true
      proxy_download: true
    backups:
      bucket: gitlab-backups
      tmpBucket: gitlab-tmp-backups
    ciSecureFiles:
      bucket: gitlab-ci-secure-files
      connection: {}
      enabled: true
    defaultProjectsFeatures:
      issues: true
      mergeRequests: true
      wiki: true
      snippets: true
      builds: true
      containerRegistry: true
    contentSecurityPolicy:
      directives:
        default_src: '''self'''
        frame_ancestors: '''self'''
        frame_src: '''self'' https://www.recaptcha.net/ https://content.googleapis.com https://content-compute.googleapis.com https://content-cloudbilling.googleapis.com https://content-cloudresourcemanager.googleapis.com'
        img_src: '* data: blob:'
        script_src: '''self'' ''unsafe-inline'' ''unsafe-eval'' https://www.recaptcha.net https://apis.google.com'
        style_src: '''self'' ''unsafe-inline'''
      enabled: true
    dependencyProxy:
      bucket: gitlab-dependency-proxy
      connection: {}
      enabled: true
      proxy_download: true
    externalDiffs:
      bucket: gitlab-mr-diffs
      connection: {}
      enabled: false
      proxy_download: true
      when: null
    lfs:
      bucket: git-lfs
      connection: {}
      enabled: true
      proxy_download: true
    object_store:
      connection:
        key: connection
        secret: minio-s3-creds
      enabled: true
      proxy_download: true
    omniauth:
      aautoSignInWithProvider: saml
      allowBypassTwoFactor: []
      autoLinkSamlUser: true
      enabled: true
      providers:
      - secret: idp-provider
      syncProfileAttributes:
      - email
      - username
      - profile
    packages:
      bucket: gitlab-packages
      connection: {}
      enabled: true
      proxy_download: true
    terraformState:
      bucket: gitlab-terraform-state
      connection: {}
      enabled: true
    uploads:
      bucket: gitlab-uploads
      connection: {}
      enabled: true
      proxy_download: true
  common:
    labels:
      environment: production
  registry:
    notifications:
      events:
        includereferences: true
      endpoints:
      - name: alertmanager
        url: http://kps-alertmanager.monitoring.svc.cluster.local:9093
        timeout: 500ms
        # DEPRECATED: use `maxretries` instead https://gitlab.com/gitlab-org/container-registry/-/issues/1243.
        # When using `maxretries`, `threshold` is ignored: https://gitlab.com/gitlab-org/container-registry/-/blob/master/docs/configuration.md?ref_type=heads#endpoints
        threshold: 5
        maxretries: 5
        backoff: 1s
        headers:
          X-Random-Config: [ plain direct ]
  hosts:
    domain: techsecom.io
    https: true
    hostSuffix: null
    gitlab:
      name: gitlab.prod.techsecom.io
      https: true
    kas:
      name: kas.gitlab.techsecom.io
      protocol: https
    pages:
      name: pages.gitlab.techsecom.io
      protocol: https
    registry:
      name: gitlab.registry.techsecom.io
      protocol: https
    smartcard:
      name: smartcard.gitlab.techsecom.io
    # ssh: ssh.gitlab.techsecom.io
  ingress:
    annotations:
      cert-manager.io/cluster-issuer: letsencrypt-prod
      kubernetes.io/tls-acme: "true"
      cert-manager.io/duration: 2160h
      cert-manager.io/renew-before: 720h
      cert-manager.io/revision-history-limit: "3"
      external-dns.alpha.kubernetes.io/enabled: "true"
      nginx.ingress.kubernetes.io/enable-access-log: "true"
      nginx.ingress.kubernetes.io/proxy-body-size: "0"
      nginx.ingress.kubernetes.io/proxy-ssl-protocols: TLSv1.3 TLSv1.2
      nginx.ingress.kubernetes.io/ssl-passthrough: "false"
      nginx.ingress.kubernetes.io/ssl-redirect: "false"
    class: nginx
    configureCertmanager: false
    enabled: true
    provider: nginx
    # tls:
    #   enabled: true
    #   secretName: gitlab-wildcard-tls
  initialRootPassword:
    key: password
    secret: gitlab-initial-root-password
  minio:
    enabled: false
  psql:
    database: gitlab
    host: cnpg-cluster-rw.cnpg-system.svc.cluster.local
    password:
      key: password
      secret: postgres-superuser-secret
      useSecret: true
    port: 5432
    username: postgres
  time_zone: America/Chicago
  # workhorse:
  #   tls:
  #     enabled: true
  #     secretName: gitlab-tls-secret
image:
  pullPolicy: Always
  tagSuffix: -fips
installCertmanager: false
nginx-ingress:
  enabled: false
postgresql:
  install: false
prometheus:
  install: false

redis:
  architecture: replication
  global:
    defaultStorageClass: nfs-csi
    storageClass: nfs-csi
  resources:
    requests:
      cpu: 100m
registry:
  storage:
    key: registry
    secret: registry-s3-config
  ingress:
    tls:
      secretName: registry-tls-secret
    # tls:
    #   enabled: true
    # secretName: registry-tls-secret
