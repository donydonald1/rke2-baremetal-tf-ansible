gitlab:
  installCertmanager: false
  certmanager-issuer:
    email: donydonald1@icloud.com
  nginx-ingress:
    enabled: false
  saml:
    provider: <path:secret/data/gitlab#saml-idp-provider>
  global:
    time_zone: America/Chicago
    appConfig:
      omniauth:
        enabled: true
        aautoSignInWithProvider: 'saml'
        syncProfileAttributes: [ 'email', "username", "profile" ]
        allowBypassTwoFactor: []
        autoLinkSamlUser: true
        providers:
        - secret: idp-provider
      object_store:
        enabled: true
        proxy_download: true
        storage_options:
          s3:
            bucket: gitlab-uploads-storage
            endpoint: http://minio.minio.svc.cluster.local:9000
            region: us-east-1
            access_key_id: <path:secret/data/minio#postgres_user>
            secret_access_key: <path:secret/data/minio#postgres_password>
      contentSecurityPolicy:
        enabled: true
        directives:
          default_src: "'self'"
          script_src: "'self' 'unsafe-inline' 'unsafe-eval' https://www.recaptcha.net https://apis.google.com"
          frame_ancestors: "'self'"
          frame_src: "'self' https://www.recaptcha.net/ https://content.googleapis.com https://content-compute.googleapis.com https://content-cloudbilling.googleapis.com https://content-cloudresourcemanager.googleapis.com"
          img_src: "* data: blob:"
          style_src: "'self' 'unsafe-inline'"
      terraformState:
        enabled: true
        bucket: gitlab-terraform-state
        # connection: {}
      minio:
        enabled: false
      gitlab_docs:
        enabled: false
        host: https://gitlab-docs.prod.techsecom.io
      # sidekiq:
      #   routingRules:
      #   - [ "resource_boundary=cpu", "cpu-boundary" ]
      #   - [ "feature_category=pages", null ]
      #   - [ "feature_category=search", "search" ]
      #   - [ "feature_category=memory|resource_boundary=memory", "memory-bound" ]
      #   - [ "*", "default" ]
      # application:
      #   create: true
    psql:
      host: cnpg-cluster-rw.cnpg-system.svc.cluster.local"
      serviceName: cnpg-cluster-rw.cnpg-system
      port: "5432"
      database: "gitlab"
      username: "gitlab"
      # applicationName:
      # preparedStatements: false
      # databaseTasks: true
      # connectTimeout:
      # keepalives:
      # keepalivesIdle:
      # keepalivesInterval:
      # keepalivesCount:
      # tcpUserTimeout:
      password:
        useSecret: true
        secret: postgresql-secret
        key: password
    redis:
      auth:
        enabled: true
        secret: redis-creds
        key: REDIS_PASSWORD
      # connectTimeout: 1
      # readTimeout: 1
      # writeTimeout: 1
      host: "redis-master"
      port: 6379
        # database: 0
        # user: webservice
        # sentinels:
        #   - host:
        #     port:
      sentinelAuth:
        enabled: false
        secret: redis-creds
        key: REDIS_PASSWORD
        # geo:
        #   enabled: true
    shell:
      tcp:
        proxyProtocol: true
    rails:
      bootsnap:
        enabled: true
    defaultProjectsFeatures:
      issues: true
      mergeRequests: true
      wiki: true
      snippets: true
      builds: true
      containerRegistry: true
    cron_jobs:
      # Flag stuck CI builds as failed
      stuck_ci_jobs_worker:
        cron: "0 * * * *"
      # Schedule pipelines in the near future
      pipeline_schedule_worker:
        cron: "19 * * * *"
      # Remove expired build artifacts
      expire_build_artifacts_worker:
        cron: "*/7 * * * *"
      # Periodically run 'git fsck' on all repositories.
      repository_check_worker:
        cron: "20 * * * *"
      # Send admin emails once a week
      admin_email_worker:
        cron: "0 0 * * 0"
      # Remove outdated repository archives
      repository_archive_cache_worker:
        cron: "0 * * * *"
      # Verify custom GitLab Pages domains
      pages_domain_verification_cron_worker:
        cron: "*/15 * * * *"
      schedule_migrate_external_diffs_worker:
        cron: "15 * * * *"
      # Prune stale group runners on opted-in namespaces
      ci_runners_stale_group_runners_prune_worker_cron:
        cron: "30 * * * *"
      # Periodically update ci_runner_versions table with up-to-date versions and status
      ci_runner_versions_reconciliation_worker:
        cron: "@daily"
      # Periodically clean up stale ci_runner_machines records
      ci_runners_stale_machines_cleanup_worker:
        cron: "36 * * * *"
    packages:
      enabled: true
      proxy_download: true
      bucket: gitlab-packages
      # connection: {}
    terraformState:
      enabled: true
      bucket: gitlab-terraform-state
      # connection: {}
    gitaly:
      internal:
        names:
        - default
        - default2
        - default3
    hosts:
      domain: techsecom.io
      # hostSuffix: prod
      https: true
      gitlab:
        name: gitlab.prod.techsecom.io
        https: true
        tls:
          enabled: true
          secretName: gitlab-tls
      registry:
        name: gitlab.registry.techsecom.io
        https: true
      minio:
        name: s3.prod.techsecom.io
        https: true
      smartcard:
        name: gitlab.smartcard.techsecom.io
      kas:
        name: gitlab.kas.techsecom.io
      pages:
        name: gitlab.pages.techsecom.io
        https: true
      ssh: gitlab.prod.techsecom.io
    ingress:
      annotations:
        kubernetes.io/ingress.class: nginx
        cert-manager.io/cluster-issuer: letsencrypt-prod
        nginx.ingress.kubernetes.io/ssl-passthrough: "false"
        external-dns.alpha.kubernetes.io/enabled: "true"
        nginx.ingress.kubernetes.io/ssl-redirect: "false"
        cert-manager.io/revision-history-limit: "3"
        cert-manager.io/duration: "2160h"
        cert-manager.io/renew-before: "720h"
        nginx.ingress.kubernetes.io/proxy-body-size: "0"
        external-dns.alpha.kubernetes.io/target: "ops-dev-dc-bm-rke2.techsecoms.com"
        external-dns.alpha.kubernetes.io/cloudflare-proxied: "true"
      configureCertmanager: false
      useNewIngressForCerts: false
      provider: "nginx"
      class: nginx
      tls:
        enabled: true
        secretName: gitlab-tls
    initialRootPassword:
      secret: gitlab-initial-root-password
      key: password
    keda:
      enabled: true
    spamcheck:
      enabled: true
    # pages:
    #   enabled: true
    #   # minReplicas: 1
    #   # maxReplicas: 2
    #   # resources:
    #   #   requests:
    #   #     cpu: 500m
    #   #     memory: 1500M
    pages:
      enabled: true
    praefect:
      enabled: false
    initialDefaults:
      signupEnabled: false
  postgresql:
    install: false
  prometheus:
    install: false
  gitlab:
    toolbox:
      replicas: 2
      backups:
        cron:
          enabled: true
          concurrencyPolicy: Replace
          failedJobsHistoryLimit: 1
          schedule: "0 1 * * *"
          successfulJobsHistoryLimit: 3
          extraArgs: "--skip registry --skip artifacts"
          suspend: false
          backoffLimit: 6
          safeToEvict: false
          restartPolicy: "OnFailure"
          resources:
            requests:
              cpu: 100m
              memory: 550M
    gitlab-rails:
      object_storage:
        artifacts:
          enabled: true
          bucket: gitlab-artifacts-storage
          connection:
            endpoint: http://minio.minio.svc.cluster.local:9000
            region: us-east-1
            access_key_id: <path:secret/data/minio#postgres_user>
            secret_access_key: <path:secret/data/minio#postgres_password>
        lfs:
          enabled: true
          bucket: gitlab-lfs-storage
          connection:
            endpoint: http://minio.minio.svc.cluster.local:9000
            region: us-east-1
            access_key_id: <path:secret/data/minio#postgres_user>
            secret_access_key: <path:secret/data/minio#postgres_password>
        uploads:
          enabled: true
          bucket: gitlab-uploads-storage
          connection:
            endpoint: http://minio.minio.svc.cluster.local:9000
            region: us-east-1
            access_key_id: <path:secret/data/minio#postgres_user>
            secret_access_key: <path:secret/data/minio#postgres_password>
        packages:
          enabled: true
          bucket: gitlab-packages-storage
          connection:
            endpoint: http://minio.minio.svc.cluster.local:9000
            region: us-east-1
            access_key_id: <path:secret/data/minio#postgres_user>
            secret_access_key: <path:secret/data/minio#postgres_password>
    webservice:
      minReplicas: 1
      maxReplicas: 6
      resources:
        requests:
          cpu: 5
      #     memory: 1500M
      # service:
      #   type: LoadBalancer
      #   # loadBalancerIP: 1.2.3.4
      #   loadBalancerSourceRanges:
      #   - 0.0.0.0/0
      ingress:
        annotations:
          kubernetes.io/ingress.class: nginx
          cert-manager.io/cluster-issuer: letsencrypt-prod
          nginx.ingress.kubernetes.io/ssl-redirect: false
          nginx.ingress.kubernetes.io/ssl-passthrough: false
          external-dns.alpha.kubernetes.io/enabled: "true"
          cert-manager.io/revision-history-limit: "3"
          cert-manager.io/duration: "2160h"
          cert-manager.io/renew-before: "720h"
          nginx.ingress.kubernetes.io/proxy-body-size: "0"
          gethomepage.dev/enabled: "true"
          gethomepage.dev/name: Gitlab
          gethomepage.dev/description: Prod Gitlab
          gethomepage.dev/group: Platform
          gethomepage.dev/app: gitlab-webservice-default
          gethomepage.dev/icon: https://gitlab.com/gitlab-com/gitlab-artwork/raw/master/logo/logo-square.png
          gethomepage.dev/href: https://gitlab.prod.techsecom.io
          gethomepage.dev/siteMonitor: https://gitlab.prod.techsecom.io
          gethomepage.dev/external: "true"
          # nginx.ingress.kubernetes.io/rewrite-target: /
        class: nginx
        tls:
          enabled: true
          secretName: gitlab-web-tls

    sidekiq:
      enabled: true
      minReplicas: 2
      maxReplicas: 3
      resources:
        requests:
          cpu: 2
      #     memory: 1000M
    gitlab-shell:
      enabled: true
      minReplicas: 3
      maxReplicas: 6
      config:
        clientAliveInterval: 15
  redis:
    install: true
    fullnameOverride: redis
    architecture: replication
    auth:
      sentinel: true
      existingSecret: redis-creds
      existingSecretPasswordKey: REDIS_PASSWORD
    master:
      persistence:
        size: 8Gi
    replica:
      persistence:
        size: 8Gi
      resources:
        requests:
          cpu: 2
          memory: 2Gi
        limits:
          memory: 3Gi
    sentinel:
      enabled: false
    # replicas: 16
  registry:
    # resources:
    requests:
      cpu: 5
    ingress:
      # annotations:
      #   kubernetes.io/ingress.class: nginx
      #   cert-manager.io/cluster-issuer: letsencrypt-prod
      #   nginx.ingress.kubernetes.io/ssl-redirect: false
      class: nginx
      tls:
        enabled: true
        secretName: registry-tls
    storage:
      secret: registry-storage
      key: storage
      # s3:
      #   bucket: gitlab-registry-storage
      #   endpoint: http://minio.minio.svc.cluster.local:9000
      #   region: us-east-1
      #   access_key_id: <path:secret/data/minio#postgres_user>
      #   secret_access_key: <path:secret/data/minio#postgres_password>
  gitlab-zoekt:
    install: false
  gitlab-runner:
    log_level: "debug"
    install: true
    rbac:
      create: true
      clusterWideAccess: true
      serviceAccountName: gitlab-runner
      serviceAccount:
        create: true
    envVars:
    - name: RUNNER_ENV
      value: "DOCKER_TLS_CERTDIR=/certs"
    - name: AWS_ACCESS_KEY_ID
      valueFrom:
        secretKeyRef:
          name: minio-s3-creds
          key: accesskey
    - name: AWS_SECRET_ACCESS_KEY
      valueFrom:
        secretKeyRef:
          name: minio-s3-creds
          key: secretkey

    securityContext:
      privileged: true
      allowPrivilegeEscalation: true

    runners:
      privileged: true
      config: |
        [[runners]]
          name = "gitlab-runner"
          [runners.kubernetes]
            privileged = true
            poll_timeout = 2000
            node_selector_overwrite_allowed = ".*"
            namespace = "{{ .Release.Namespace }}"
            image = "docker:stable"

          [runners.cache]
            Type = "s3"
            Path = "gitlab-runner"
            Shared = true
            [runners.cache.s3]
              ServerAddress = "minio.minio.svc.cluster.local:9000"
              BucketName = "runner-cache"
              BucketLocation = "us-east-1"
              S3ForcePathStyle = true
              Insecure = true

        [[runners.kubernetes.volumes.empty_dir]]
          name = "docker-certs"
          mount_path = "/certs/client"
          medium = "Memory"
    podAnnotations:
      gitlab.com/prometheus_scrape: "true"
      gitlab.com/prometheus_port: 9252

eso:
  # -- Install components of the ESO.
  enabled: true
  # -- Defines provider type. One of `aws` or `generic`.
  type: "vault"
  # -- Defines Secret Store name.
  secretStoreName: "vault"
  # -- Value name in AWS ParameterStore, AWS SecretsManager or other Secret Store.
  secretName: "secret/harbor"
  # -- Role ARN for the ExternalSecretOperator to assume.
